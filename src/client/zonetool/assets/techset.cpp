#include <std_include.hpp>
#include "techset.hpp"

#include "vertexshader.hpp"
#include "vertexdecl.hpp"
#include "hullshader.hpp"
#include "domainshader.hpp"
#include "pixelshader.hpp"
#include <utils/io.hpp>

namespace zonetool
{
	namespace
	{
		h1::MaterialTechniqueSet* convert_to_h1(MaterialTechniqueSet* h2_asset, utils::memory::allocator& allocator)
		{
			const auto asset = allocator.allocate<h1::MaterialTechniqueSet>();
			asset->name = allocator.duplicate_string(add_postfix(h2_asset->name));
			asset->flags = h2_asset->flags;
			asset->worldVertFormat = h2_asset->worldVertFormat;
			asset->preDisplacementOnlyCount = h2_asset->preDisplacementOnlyCount;

			std::vector<int> debug_tech_indexes = {59, 122, 185, 248};
			auto current_debug_tech = 0;
			auto h2_tecniques_index = 0;
			for (auto i = 0u; i < TECHNIQUES_COUNT; i++)
			{
				if (current_debug_tech < debug_tech_indexes.size()
					&& h2_tecniques_index == debug_tech_indexes[current_debug_tech])
				{
					++current_debug_tech;
					h2_tecniques_index += 3;
				}

				const auto tech = reinterpret_cast<h1::MaterialTechnique*>(h2_asset->techniques[h2_tecniques_index]);
				if (tech != nullptr)
				{
					const auto size = sizeof(MaterialTechniqueHeader) + sizeof(MaterialPass) * tech->hdr.passCount;
					asset->techniques[i] = reinterpret_cast<h1::MaterialTechnique*>(
						allocator.allocate(size));
					std::memcpy(asset->techniques[i], tech, size);
					asset->techniques[i]->hdr.name = allocator.duplicate_string(add_postfix(asset->techniques[i]->hdr.name));
				}
				else
				{
					asset->techniques[i] = nullptr;
				}

				++h2_tecniques_index;
			}

			return asset;
		}

		unsigned char* convert_to_h1(unsigned char* h2_array, utils::memory::allocator& allocator)
		{
			const auto array = allocator.allocate_array<unsigned char>(TECHNIQUES_COUNT);

			std::vector<int> debug_tech_indexes = {59, 122, 185, 248};
			auto current_debug_tech = 0;
			auto h2_tecniques_index = 0;
			for (auto i = 0u; i < TECHNIQUES_COUNT; i++)
			{
				if (current_debug_tech < debug_tech_indexes.size() && h2_tecniques_index == debug_tech_indexes[current_debug_tech])
				{
					++current_debug_tech;
					h2_tecniques_index += 3;
				}

				array[i] = h2_array[h2_tecniques_index];

				++h2_tecniques_index;
			}

			return array;
		}

		std::unordered_map<unsigned short, unsigned short> h1_const_map =
		{
				{CONST_SRC_CODE_LIGHT_POSITION, h1::CONST_SRC_CODE_LIGHT_POSITION},
				{CONST_SRC_CODE_LIGHT_DIFFUSE, h1::CONST_SRC_CODE_LIGHT_DIFFUSE},
				{CONST_SRC_CODE_LIGHT_PHYSICALSIZE, h1::CONST_SRC_CODE_LIGHT_PHYSICALSIZE},
				{CONST_SRC_CODE_LIGHT_FADEOFFSET, h1::CONST_SRC_CODE_LIGHT_FADEOFFSET},
				{CONST_SRC_CODE_LIGHT_SPECULAR, h1::CONST_SRC_CODE_LIGHT_SPECULAR},
				{CONST_SRC_CODE_LIGHT_SPOTDIR, h1::CONST_SRC_CODE_LIGHT_SPOTDIR},
				{CONST_SRC_CODE_LIGHT_SPOTFACTORS, h1::CONST_SRC_CODE_LIGHT_SPOTFACTORS},
				{CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT, h1::CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT},
				{CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM, h1::CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM},
				{CONST_SRC_CODE_LIGHT_POSITION1, h1::CONST_SRC_CODE_LIGHT_POSITION1},
				{CONST_SRC_CODE_LIGHT_DIFFUSE1, h1::CONST_SRC_CODE_LIGHT_DIFFUSE1},
				{CONST_SRC_CODE_LIGHT_PHYSICALSIZE1, h1::CONST_SRC_CODE_LIGHT_PHYSICALSIZE1},
				{CONST_SRC_CODE_LIGHT_FADEOFFSET1, h1::CONST_SRC_CODE_LIGHT_FADEOFFSET1},
				{CONST_SRC_CODE_LIGHT_SPECULAR1, h1::CONST_SRC_CODE_LIGHT_SPECULAR1},
				{CONST_SRC_CODE_LIGHT_SPOTDIR1, h1::CONST_SRC_CODE_LIGHT_SPOTDIR1},
				{CONST_SRC_CODE_LIGHT_SPOTFACTORS1, h1::CONST_SRC_CODE_LIGHT_SPOTFACTORS1},
				{CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT1, h1::CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT1},
				{CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM1, h1::CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM1},
				{CONST_SRC_CODE_LIGHT_POSITION2, h1::CONST_SRC_CODE_LIGHT_POSITION2},
				{CONST_SRC_CODE_LIGHT_DIFFUSE2, h1::CONST_SRC_CODE_LIGHT_DIFFUSE2},
				{CONST_SRC_CODE_LIGHT_PHYSICALSIZE2, h1::CONST_SRC_CODE_LIGHT_PHYSICALSIZE2},
				{CONST_SRC_CODE_LIGHT_FADEOFFSET2, h1::CONST_SRC_CODE_LIGHT_FADEOFFSET2},
				{CONST_SRC_CODE_LIGHT_SPECULAR2, h1::CONST_SRC_CODE_LIGHT_SPECULAR2},
				{CONST_SRC_CODE_LIGHT_SPOTDIR2, h1::CONST_SRC_CODE_LIGHT_SPOTDIR2},
				{CONST_SRC_CODE_LIGHT_SPOTFACTORS2, h1::CONST_SRC_CODE_LIGHT_SPOTFACTORS2},
				{CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT2, h1::CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT2},
				{CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM2, h1::CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM2},
				{CONST_SRC_CODE_LIGHT_POSITION3, h1::CONST_SRC_CODE_LIGHT_POSITION3},
				{CONST_SRC_CODE_LIGHT_DIFFUSE3, h1::CONST_SRC_CODE_LIGHT_DIFFUSE3},
				{CONST_SRC_CODE_LIGHT_PHYSICALSIZE3, h1::CONST_SRC_CODE_LIGHT_PHYSICALSIZE3},
				{CONST_SRC_CODE_LIGHT_FADEOFFSET3, h1::CONST_SRC_CODE_LIGHT_FADEOFFSET3},
				{CONST_SRC_CODE_LIGHT_SPECULAR3, h1::CONST_SRC_CODE_LIGHT_SPECULAR3},
				{CONST_SRC_CODE_LIGHT_SPOTDIR3, h1::CONST_SRC_CODE_LIGHT_SPOTDIR3},
				{CONST_SRC_CODE_LIGHT_SPOTFACTORS3, h1::CONST_SRC_CODE_LIGHT_SPOTFACTORS3},
				{CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT3, h1::CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT3},
				{CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM3, h1::CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM3},
				{CONST_SRC_CODE_LIGHT_POSITION_DB_ARRAY_0, h1::CONST_SRC_CODE_LIGHT_POSITION_DB_ARRAY_0},
				{CONST_SRC_CODE_LIGHT_POSITION_DB_ARRAY_1, h1::CONST_SRC_CODE_LIGHT_POSITION_DB_ARRAY_1},
				{CONST_SRC_CODE_LIGHT_POSITION_DB_ARRAY_2, h1::CONST_SRC_CODE_LIGHT_POSITION_DB_ARRAY_2},
				{CONST_SRC_CODE_LIGHT_POSITION_DB_ARRAY_3, h1::CONST_SRC_CODE_LIGHT_POSITION_DB_ARRAY_3},
				{CONST_SRC_CODE_LIGHT_DIFFUSE_DB_ARRAY_0, h1::CONST_SRC_CODE_LIGHT_DIFFUSE_DB_ARRAY_0},
				{CONST_SRC_CODE_LIGHT_DIFFUSE_DB_ARRAY_1, h1::CONST_SRC_CODE_LIGHT_DIFFUSE_DB_ARRAY_1},
				{CONST_SRC_CODE_LIGHT_DIFFUSE_DB_ARRAY_2, h1::CONST_SRC_CODE_LIGHT_DIFFUSE_DB_ARRAY_2},
				{CONST_SRC_CODE_LIGHT_DIFFUSE_DB_ARRAY_3, h1::CONST_SRC_CODE_LIGHT_DIFFUSE_DB_ARRAY_3},
				{CONST_SRC_CODE_LIGHT_PHYSICALSIZE_DB_ARRAY_0, h1::CONST_SRC_CODE_LIGHT_PHYSICALSIZE_DB_ARRAY_0},
				{CONST_SRC_CODE_LIGHT_PHYSICALSIZE_DB_ARRAY_1, h1::CONST_SRC_CODE_LIGHT_PHYSICALSIZE_DB_ARRAY_1},
				{CONST_SRC_CODE_LIGHT_PHYSICALSIZE_DB_ARRAY_2, h1::CONST_SRC_CODE_LIGHT_PHYSICALSIZE_DB_ARRAY_2},
				{CONST_SRC_CODE_LIGHT_PHYSICALSIZE_DB_ARRAY_3, h1::CONST_SRC_CODE_LIGHT_PHYSICALSIZE_DB_ARRAY_3},
				{CONST_SRC_CODE_LIGHT_FADEOFFSET_DB_ARRAY_0, h1::CONST_SRC_CODE_LIGHT_FADEOFFSET_DB_ARRAY_0},
				{CONST_SRC_CODE_LIGHT_FADEOFFSET_DB_ARRAY_1, h1::CONST_SRC_CODE_LIGHT_FADEOFFSET_DB_ARRAY_1},
				{CONST_SRC_CODE_LIGHT_FADEOFFSET_DB_ARRAY_2, h1::CONST_SRC_CODE_LIGHT_FADEOFFSET_DB_ARRAY_2},
				{CONST_SRC_CODE_LIGHT_FADEOFFSET_DB_ARRAY_3, h1::CONST_SRC_CODE_LIGHT_FADEOFFSET_DB_ARRAY_3},
				{CONST_SRC_CODE_LIGHT_SPECULAR_DB_ARRAY_0, h1::CONST_SRC_CODE_LIGHT_SPECULAR_DB_ARRAY_0},
				{CONST_SRC_CODE_LIGHT_SPECULAR_DB_ARRAY_1, h1::CONST_SRC_CODE_LIGHT_SPECULAR_DB_ARRAY_1},
				{CONST_SRC_CODE_LIGHT_SPECULAR_DB_ARRAY_2, h1::CONST_SRC_CODE_LIGHT_SPECULAR_DB_ARRAY_2},
				{CONST_SRC_CODE_LIGHT_SPECULAR_DB_ARRAY_3, h1::CONST_SRC_CODE_LIGHT_SPECULAR_DB_ARRAY_3},
				{CONST_SRC_CODE_LIGHT_SPOTDIR_DB_ARRAY_0, h1::CONST_SRC_CODE_LIGHT_SPOTDIR_DB_ARRAY_0},
				{CONST_SRC_CODE_LIGHT_SPOTDIR_DB_ARRAY_1, h1::CONST_SRC_CODE_LIGHT_SPOTDIR_DB_ARRAY_1},
				{CONST_SRC_CODE_LIGHT_SPOTDIR_DB_ARRAY_2, h1::CONST_SRC_CODE_LIGHT_SPOTDIR_DB_ARRAY_2},
				{CONST_SRC_CODE_LIGHT_SPOTDIR_DB_ARRAY_3, h1::CONST_SRC_CODE_LIGHT_SPOTDIR_DB_ARRAY_3},
				{CONST_SRC_CODE_LIGHT_SPOTFACTORS_DB_ARRAY_0, h1::CONST_SRC_CODE_LIGHT_SPOTFACTORS_DB_ARRAY_0},
				{CONST_SRC_CODE_LIGHT_SPOTFACTORS_DB_ARRAY_1, h1::CONST_SRC_CODE_LIGHT_SPOTFACTORS_DB_ARRAY_1},
				{CONST_SRC_CODE_LIGHT_SPOTFACTORS_DB_ARRAY_2, h1::CONST_SRC_CODE_LIGHT_SPOTFACTORS_DB_ARRAY_2},
				{CONST_SRC_CODE_LIGHT_SPOTFACTORS_DB_ARRAY_3, h1::CONST_SRC_CODE_LIGHT_SPOTFACTORS_DB_ARRAY_3},
				{CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM_DB_ARRAY_0, h1::CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM_DB_ARRAY_0},
				{CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM_DB_ARRAY_1, h1::CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM_DB_ARRAY_1},
				{CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM_DB_ARRAY_2, h1::CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM_DB_ARRAY_2},
				{CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM_DB_ARRAY_3, h1::CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM_DB_ARRAY_3},
				{CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT_DB_ARRAY_0, h1::CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT_DB_ARRAY_0},
				{CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT_DB_ARRAY_1, h1::CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT_DB_ARRAY_1},
				{CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT_DB_ARRAY_2, h1::CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT_DB_ARRAY_2},
				{CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT_DB_ARRAY_3, h1::CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT_DB_ARRAY_3},
				{CONST_SRC_CODE_LIGHT_DYN_COUNT, h1::CONST_SRC_CODE_LIGHT_DYN_COUNT},
				{CONST_SRC_CODE_LIGHT_DYN_TYPES, h1::CONST_SRC_CODE_LIGHT_DYN_TYPES},
				{CONST_SRC_CODE_LIGHT_DYN_SHADOW_TYPES, h1::CONST_SRC_CODE_LIGHT_DYN_SHADOW_TYPES},
				{CONST_SRC_CODE_PARTICLE_CLOUD_COLOR, h1::CONST_SRC_CODE_PARTICLE_CLOUD_COLOR},
				{CONST_SRC_CODE_GAMETIME, h1::CONST_SRC_CODE_GAMETIME},
				{CONST_SRC_CODE_SYSTEMTIME, h1::CONST_SRC_CODE_SYSTEMTIME},
				{CONST_SRC_CODE_GENERIC_MATERIAL_DATA, h1::CONST_SRC_CODE_GENERIC_MATERIAL_DATA},
				{CONST_SRC_CODE_EYEOFFSET, h1::CONST_SRC_CODE_EYEOFFSET},
				//{CONST_SRC_CODE_RATIO_MASK, h1::CONST_SRC_NONE},

				{CONST_SRC_CODE_WORLD_MATRIX_EYE_OFFSET, h1::CONST_SRC_CODE_WORLD_MATRIX_EYE_OFFSET},
				{CONST_SRC_CODE_HUD_OUTLINE_PARMS, h1::CONST_SRC_CODE_EMBLEM_LUT_SELECTOR}, // sp CONST_SRC_CODE_HUD_OUTLINE_PARMS mp CONST_SRC_CODE_EMBLEM_LUT_SELECTOR
				{CONST_SRC_CODE_MODEL_VELOCITY_PARMS, h1::CONST_SRC_CODE_MODEL_VELOCITY_PARMS},
				{CONST_SRC_CODE_MODEL_VELOCITY_SKINNED_PARMS, h1::CONST_SRC_CODE_MODEL_VELOCITY_SKINNED_PARMS},
				{CONST_SRC_CODE_POSTFX_CONTROL0, h1::CONST_SRC_CODE_POSTFX_CONTROL0},
				{CONST_SRC_CODE_POSTFX_CONTROL1, h1::CONST_SRC_CODE_POSTFX_CONTROL1},
				{CONST_SRC_CODE_POSTFX_CONTROL2, h1::CONST_SRC_CODE_POSTFX_CONTROL2},
				{CONST_SRC_CODE_POSTFX_CONTROL3, h1::CONST_SRC_CODE_POSTFX_CONTROL3},
				{CONST_SRC_CODE_POSTFX_CONTROL4, h1::CONST_SRC_CODE_POSTFX_CONTROL4},
				{CONST_SRC_CODE_POSTFX_CONTROL5, h1::CONST_SRC_CODE_POSTFX_CONTROL5},
				{CONST_SRC_CODE_POSTFX_CONTROL6, h1::CONST_SRC_CODE_POSTFX_CONTROL6},
				{CONST_SRC_CODE_POSTFX_CONTROL7, h1::CONST_SRC_CODE_POSTFX_CONTROL7},
				{CONST_SRC_CODE_POSTFX_CONTROL8, h1::CONST_SRC_CODE_POSTFX_CONTROL8},
				{CONST_SRC_CODE_POSTFX_CONTROL9, h1::CONST_SRC_CODE_POSTFX_CONTROL9},
				{CONST_SRC_CODE_POSTFX_CONTROLA, h1::CONST_SRC_CODE_POSTFX_CONTROLA},
				{CONST_SRC_CODE_POSTFX_CONTROLB, h1::CONST_SRC_CODE_POSTFX_CONTROLB},
				{CONST_SRC_CODE_POSTFX_CONTROLC, h1::CONST_SRC_CODE_POSTFX_CONTROLC},
				{CONST_SRC_CODE_POSTFX_CONTROLD, h1::CONST_SRC_CODE_POSTFX_CONTROLD},
				{CONST_SRC_CODE_POSTFX_CONTROLE, h1::CONST_SRC_CODE_POSTFX_CONTROLE},
				{CONST_SRC_CODE_POSTFX_CONTROLF, h1::CONST_SRC_CODE_POSTFX_CONTROLF},
				{CONST_SRC_CODE_SCRIPT_PARMS, h1::CONST_SRC_CODE_SCRIPT_PARMS},
				{CONST_SRC_CODE_EFFECT_MODEL_COLOR, h1::CONST_SRC_CODE_EFFECT_MODEL_COLOR},
				{CONST_SRC_CODE_EFFECT_MODEL_COLOR_EMISSIVE, h1::CONST_SRC_CODE_EFFECT_MODEL_COLOR_EMISSIVE},
				{CONST_SRC_CODE_FILTER_TAP_0, h1::CONST_SRC_CODE_FILTER_TAP_0},
				{CONST_SRC_CODE_FILTER_TAP_1, h1::CONST_SRC_CODE_FILTER_TAP_1},
				{CONST_SRC_CODE_FILTER_TAP_2, h1::CONST_SRC_CODE_FILTER_TAP_2},
				{CONST_SRC_CODE_FILTER_TAP_3, h1::CONST_SRC_CODE_FILTER_TAP_3},
				{CONST_SRC_CODE_FILTER_TAP_4, h1::CONST_SRC_CODE_FILTER_TAP_4},
				{CONST_SRC_CODE_FILTER_TAP_5, h1::CONST_SRC_CODE_FILTER_TAP_5},
				{CONST_SRC_CODE_FILTER_TAP_6, h1::CONST_SRC_CODE_FILTER_TAP_6},
				{CONST_SRC_CODE_FILTER_TAP_7, h1::CONST_SRC_CODE_FILTER_TAP_7},
				{CONST_SRC_CODE_FILTER_TAP_8, h1::CONST_SRC_CODE_FILTER_TAP_8},
				{CONST_SRC_CODE_FILTER_TAP_9, h1::CONST_SRC_CODE_FILTER_TAP_9},
				{CONST_SRC_CODE_FILTER_TAP_10, h1::CONST_SRC_CODE_FILTER_TAP_10},
				{CONST_SRC_CODE_FILTER_TAP_11, h1::CONST_SRC_CODE_FILTER_TAP_11},
				{CONST_SRC_CODE_COLOR_MATRIX_R, h1::CONST_SRC_CODE_COLOR_MATRIX_R},
				{CONST_SRC_CODE_COLOR_MATRIX_G, h1::CONST_SRC_CODE_COLOR_MATRIX_G},
				{CONST_SRC_CODE_COLOR_MATRIX_B, h1::CONST_SRC_CODE_COLOR_MATRIX_B},
				{CONST_SRC_CODE_RENDER_TARGET_SIZE, h1::CONST_SRC_CODE_RENDER_TARGET_SIZE},
				{CONST_SRC_CODE_RENDER_SOURCE_SIZE, h1::CONST_SRC_CODE_RENDER_SOURCE_SIZE},
				{CONST_SRC_CODE_VEIL_PARAMS, h1::CONST_SRC_CODE_VEIL_PARAMS},
				{CONST_SRC_CODE_FXAA_RCPFRAMEOPT, h1::CONST_SRC_CODE_FXAA_RCPFRAMEOPT},
				{CONST_SRC_CODE_VOLUME_LIGHT_SCATTER_1, h1::CONST_SRC_CODE_VOLUME_LIGHT_SCATTER_1},
				{CONST_SRC_CODE_VOLUME_LIGHT_SCATTER_2, h1::CONST_SRC_CODE_VOLUME_LIGHT_SCATTER_2},
				{CONST_SRC_CODE_VOLUME_LIGHT_SCATTER_3, h1::CONST_SRC_CODE_VOLUME_LIGHT_SCATTER_3},
				{CONST_SRC_CODE_MODEL_LIGHTMAP_PARAMS, h1::CONST_SRC_CODE_MODEL_LIGHTMAP_PARAMS},
				{CONST_SRC_CODE_NEARPLANE_ORG, h1::CONST_SRC_CODE_NEARPLANE_ORG},
				{CONST_SRC_CODE_NEARPLANE_DX, h1::CONST_SRC_CODE_NEARPLANE_DX},
				{CONST_SRC_CODE_NEARPLANE_DY, h1::CONST_SRC_CODE_NEARPLANE_DY},
				{CONST_SRC_CODE_SSAO_POWER_BB_SHARPNESS_STEP, h1::CONST_SRC_CODE_SSAO_POWER_BB_SHARPNESS_STEP},
				{CONST_SRC_CODE_SSAO_COLOR_COEFF, h1::CONST_SRC_CODE_SSAO_COLOR_COEFF},
				{CONST_SRC_CODE_SSAO_FALLOFF_DEPTH_SCALE, h1::CONST_SRC_CODE_SSAO_FALLOFF_DEPTH_SCALE},
				{CONST_SRC_CODE_SSAO_UV_TO_ROT_SCALE_AND_FADE, h1::CONST_SRC_CODE_SSAO_UV_TO_ROT_SCALE_AND_FADE},
				{CONST_SRC_CODE_SSAO_SAMPLE_MAT_SCALE, h1::CONST_SRC_CODE_SSAO_SAMPLE_MAT_SCALE},
				{CONST_SRC_CODE_SSAO_DEPTH_OFFSET_REJECT, h1::CONST_SRC_CODE_SSAO_DEPTH_OFFSET_REJECT},
				{CONST_SRC_CODE_LIT2D_LIGHTDIRX2, h1::CONST_SRC_CODE_LIT2D_LIGHTDIRX2},
				{CONST_SRC_CODE_LIT2D_SPECHALFANGLEDIRX2, h1::CONST_SRC_CODE_LIT2D_SPECHALFANGLEDIRX2},
				{CONST_SRC_CODE_LIT2D_AMBIENTCOLOR, h1::CONST_SRC_CODE_LIT2D_AMBIENTCOLOR},
				{CONST_SRC_CODE_LIT2D_DIFFUSECOLOR, h1::CONST_SRC_CODE_LIT2D_DIFFUSECOLOR},
				{CONST_SRC_CODE_LIT2D_SPECCOLOR_SPECEXPONENT, h1::CONST_SRC_CODE_LIT2D_SPECCOLOR_SPECEXPONENT},
				{CONST_SRC_CODE_LIT2D_ADDITIVECOLOR, h1::CONST_SRC_CODE_LIT2D_ADDITIVECOLOR},
				{CONST_SRC_CODE_LIT2D_BLOODSPATTER_AMBIENTCOLOR, h1::CONST_SRC_CODE_LIT2D_BLOODSPATTER_AMBIENTCOLOR},
				{CONST_SRC_CODE_LIT2D_BLOODSPATTER_DIFFUSECOLOR, h1::CONST_SRC_CODE_LIT2D_BLOODSPATTER_DIFFUSECOLOR},
				{CONST_SRC_CODE_LIT2D_BLOODSPATTER_SPECCOLOR_SPECEXPONENT, h1::CONST_SRC_CODE_LIT2D_BLOODSPATTER_SPECCOLOR_SPECEXPONENT},
				{CONST_SRC_CODE_LIT2D_BLOODSPATTER_ADDITIVECOLOR, h1::CONST_SRC_CODE_LIT2D_BLOODSPATTER_ADDITIVECOLOR},
				{CONST_SRC_CODE_LIT2D_HUDBLOOD_COLOR, h1::CONST_SRC_CODE_LIT2D_HUDBLOOD_COLOR},
				{CONST_SRC_CODE_LIT2D_HUDBLOOD_COLOR_THIN, h1::CONST_SRC_CODE_LIT2D_HUDBLOOD_COLOR_THIN},
				{CONST_SRC_CODE_DOF_EQUATION_VIEWMODEL_AND_FAR_BLUR, h1::CONST_SRC_CODE_DOF_EQUATION_VIEWMODEL_AND_FAR_BLUR},
				{CONST_SRC_CODE_DOF_EQUATION_SCENE, h1::CONST_SRC_CODE_DOF_EQUATION_SCENE},
				{CONST_SRC_CODE_DOF_UNK, h1::CONST_SRC_CODE_DOF_EQUATION_SCENE},

				{CONST_SRC_CODE_DOF_LERP_SCALE, h1::CONST_SRC_CODE_DOF_LERP_SCALE},
				{CONST_SRC_CODE_DOF_LERP_BIAS, h1::CONST_SRC_CODE_DOF_LERP_BIAS},
				{CONST_SRC_CODE_DOF_ROW_DELTA, h1::CONST_SRC_CODE_DOF_ROW_DELTA},
				{CONST_SRC_CODE_DOF_EQUATION, h1::CONST_SRC_CODE_DOF_EQUATION},
				{CONST_SRC_CODE_DOF_PARAMS, h1::CONST_SRC_CODE_DOF_PARAMS},
				{CONST_SRC_CODE_DOF_TILE_PARAMS, h1::CONST_SRC_CODE_DOF_TILE_PARAMS},
				{CONST_SRC_CODE_FRAME_COUNT_PARAMS, h1::CONST_SRC_CODE_FRAME_COUNT_PARAMS},
				{CONST_SRC_CODE_MOTION_MATRIX_X, h1::CONST_SRC_CODE_MOTION_MATRIX_X},
				{CONST_SRC_CODE_MOTION_MATRIX_Y, h1::CONST_SRC_CODE_MOTION_MATRIX_Y},
				{CONST_SRC_CODE_MOTION_MATRIX_W, h1::CONST_SRC_CODE_MOTION_MATRIX_W},
				{CONST_SRC_CODE_SSR_PREV_FRAME_VIEWPROJECTION_MATRIX_R0, h1::CONST_SRC_CODE_SSR_PREV_FRAME_VIEWPROJECTION_MATRIX_R0},
				{CONST_SRC_CODE_SSR_PREV_FRAME_VIEWPROJECTION_MATRIX_R1, h1::CONST_SRC_CODE_SSR_PREV_FRAME_VIEWPROJECTION_MATRIX_R1},
				{CONST_SRC_CODE_SSR_PREV_FRAME_VIEWPROJECTION_MATRIX_R2, h1::CONST_SRC_CODE_SSR_PREV_FRAME_VIEWPROJECTION_MATRIX_R2},
				{CONST_SRC_CODE_SSR_PREV_FRAME_VIEWPROJECTION_MATRIX_R3, h1::CONST_SRC_CODE_SSR_PREV_FRAME_VIEWPROJECTION_MATRIX_R3},
				{CONST_SRC_CODE_PREV_EYEPOSITION_TRANSFORM, h1::CONST_SRC_CODE_PREV_EYEPOSITION_TRANSFORM},
				{CONST_SRC_CODE_SCREEN_SPACE_REFLECTION_PARAMETERS, h1::CONST_SRC_CODE_SCREEN_SPACE_REFLECTION_PARAMETERS},
				{CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE_AND_OFFSET, h1::CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE_AND_OFFSET},
				{CONST_SRC_CODE_SSR_CLIP_TO_FADE_SCALE_OFFSET_PS, h1::CONST_SRC_CODE_SSR_CLIP_TO_FADE_SCALE_OFFSET_PS},
				{CONST_SRC_CODE_SSS_MRT_OFF_SHADER_OFF, h1::CONST_SRC_CODE_SSS_MRT_OFF_SHADER_OFF},
				{CONST_SRC_CODE_MDAO_VIEWTOOCCLUDER_MATRIX_R0, h1::CONST_SRC_CODE_MDAO_VIEWTOOCCLUDER_MATRIX_R0},
				{CONST_SRC_CODE_MDAO_VIEWTOOCCLUDER_MATRIX_R1, h1::CONST_SRC_CODE_MDAO_VIEWTOOCCLUDER_MATRIX_R1},
				{CONST_SRC_CODE_MDAO_VIEWTOOCCLUDER_MATRIX_R2, h1::CONST_SRC_CODE_MDAO_VIEWTOOCCLUDER_MATRIX_R2},
				{CONST_SRC_CODE_MDAO_VIEWTOOCCLUDER_MATRIX_R3, h1::CONST_SRC_CODE_MDAO_VIEWTOOCCLUDER_MATRIX_R3},
				{CONST_SRC_CODE_MDAO_WORLDTOOCCLUDERFRAME_MATRIX_R0, h1::CONST_SRC_CODE_MDAO_WORLDTOOCCLUDERFRAME_MATRIX_R0},
				{CONST_SRC_CODE_MDAO_WORLDTOOCCLUDERFRAME_MATRIX_R1, h1::CONST_SRC_CODE_MDAO_WORLDTOOCCLUDERFRAME_MATRIX_R1},
				{CONST_SRC_CODE_MDAO_WORLDTOOCCLUDERFRAME_MATRIX_R2, h1::CONST_SRC_CODE_MDAO_WORLDTOOCCLUDERFRAME_MATRIX_R2},
				{CONST_SRC_CODE_MDAO_WORLDTOOCCLUDERFRAME_MATRIX_R3, h1::CONST_SRC_CODE_MDAO_WORLDTOOCCLUDERFRAME_MATRIX_R3},
				{CONST_SRC_CODE_MDAO_SCREEN_PARAMS, h1::CONST_SRC_CODE_MDAO_SCREEN_PARAMS},
				{CONST_SRC_CODE_MDAO_CAMERA_PARAMS, h1::CONST_SRC_CODE_MDAO_CAMERA_PARAMS},
				{CONST_SRC_CODE_MDAO_LOOKUP_PARAMS, h1::CONST_SRC_CODE_MDAO_LOOKUP_PARAMS},
				{CONST_SRC_CODE_MDAO_VOLUME_PARAMS, h1::CONST_SRC_CODE_MDAO_VOLUME_PARAMS},
				{CONST_SRC_CODE_DISTORTION_SAMPLE_LIMITS_PS, h1::CONST_SRC_CODE_DISTORTION_SAMPLE_LIMITS_PS},
				{CONST_SRC_CODE_SCOPE_SAMPLE_LIMITS_PS, h1::CONST_SRC_CODE_SCOPE_SAMPLE_LIMITS_PS},
				{CONST_SRC_CODE_UV_TO_PREV_SCALED_CLIP_MAT_C0_PS, h1::CONST_SRC_CODE_UV_TO_PREV_SCALED_CLIP_MAT_C0_PS},
				{CONST_SRC_CODE_UV_TO_PREV_SCALED_CLIP_MAT_C1_PS, h1::CONST_SRC_CODE_UV_TO_PREV_SCALED_CLIP_MAT_C1_PS},
				{CONST_SRC_CODE_UV_TO_PREV_SCALED_CLIP_MAT_C3_PS, h1::CONST_SRC_CODE_UV_TO_PREV_SCALED_CLIP_MAT_C3_PS},
				{CONST_SRC_CODE_PREV_FRAME_VIEWPROJECTION_MATRIX_R0, h1::CONST_SRC_CODE_PREV_FRAME_VIEWPROJECTION_MATRIX_R0},
				{CONST_SRC_CODE_PREV_FRAME_VIEWPROJECTION_MATRIX_R1, h1::CONST_SRC_CODE_PREV_FRAME_VIEWPROJECTION_MATRIX_R1},
				{CONST_SRC_CODE_PREV_FRAME_VIEWPROJECTION_MATRIX_R2, h1::CONST_SRC_CODE_PREV_FRAME_VIEWPROJECTION_MATRIX_R2},
				{CONST_SRC_CODE_PREV_FRAME_VIEWPROJECTION_MATRIX_R3, h1::CONST_SRC_CODE_PREV_FRAME_VIEWPROJECTION_MATRIX_R3},
				{CONST_SRC_CODE_PREV_FRAME_WORLD_MATRIX_EYE_OFFSET, h1::CONST_SRC_CODE_PREV_FRAME_WORLD_MATRIX_EYE_OFFSET},
				{CONST_SRC_CODE_STATIC_VELOCITY_PARMS, h1::CONST_SRC_CODE_STATIC_VELOCITY_PARMS},
				{CONST_SRC_CODE_MOTION_BLUR_HQ_PARAMS, h1::CONST_SRC_CODE_MOTION_BLUR_HQ_PARAMS},
				{CONST_SRC_CODE_MOTION_BLUR_HQ_TILE_MAX_PARAMS, h1::CONST_SRC_CODE_MOTION_BLUR_HQ_TILE_MAX_PARAMS},
				{CONST_SRC_CODE_MB_UV_TO_PREV_SCALED_CLIP_MAT_C0_PS, h1::CONST_SRC_CODE_MB_UV_TO_PREV_SCALED_CLIP_MAT_C0_PS},
				{CONST_SRC_CODE_MB_UV_TO_PREV_SCALED_CLIP_MAT_C1_PS, h1::CONST_SRC_CODE_MB_UV_TO_PREV_SCALED_CLIP_MAT_C1_PS},
				{CONST_SRC_CODE_MB_UV_TO_PREV_SCALED_CLIP_MAT_C3_PS, h1::CONST_SRC_CODE_MB_UV_TO_PREV_SCALED_CLIP_MAT_C3_PS},
				{CONST_SRC_CODE_SHADOWMAP_SWITCH_PARTITION_ARRAY_0, h1::CONST_SRC_CODE_SHADOWMAP_SWITCH_PARTITION_ARRAY_0},
				{CONST_SRC_CODE_SHADOWMAP_SWITCH_PARTITION_ARRAY_1, h1::CONST_SRC_CODE_SHADOWMAP_SWITCH_PARTITION_ARRAY_1},
				{CONST_SRC_CODE_SHADOWMAP_DISTANCE_BIAS, h1::CONST_SRC_CODE_SHADOWMAP_DISTANCE_BIAS},
				{CONST_SRC_CODE_SHADOWMAP_SCALE, h1::CONST_SRC_CODE_SHADOWMAP_SCALE},
				{CONST_SRC_CODE_SHADOWMAP_PARTITION_UV_OFFSET, h1::CONST_SRC_CODE_SHADOWMAP_PARTITION_UV_OFFSET},
				{CONST_SRC_CODE_SHADOWMAP_CASCADE_MASK, h1::CONST_SRC_CODE_SHADOWMAP_CASCADE_MASK},
				{CONST_SRC_CODE_SHADOWMAP_DISTANCE_BLEND, h1::CONST_SRC_CODE_SHADOWMAP_DISTANCE_BLEND},
				{CONST_SRC_CODE_ZNEAR, h1::CONST_SRC_CODE_ZNEAR},
				{CONST_SRC_CODE_LIGHTING_LOOKUP_SCALE, h1::CONST_SRC_CODE_LIGHTING_LOOKUP_SCALE},
				{CONST_SRC_CODE_INV_SCENE_PROJECTION, h1::CONST_SRC_CODE_INV_SCENE_PROJECTION},
				{CONST_SRC_CODE_RIM_LIGHT_0_DIR, h1::CONST_SRC_CODE_RIM_LIGHT_0_DIR},
				{CONST_SRC_CODE_RIM_LIGHT_0_COLOR, h1::CONST_SRC_CODE_RIM_LIGHT_0_COLOR},
				{CONST_SRC_CODE_RIM_LIGHT_1_DIR, h1::CONST_SRC_CODE_RIM_LIGHT_1_DIR},
				{CONST_SRC_CODE_RIM_LIGHT_1_COLOR, h1::CONST_SRC_CODE_RIM_LIGHT_1_COLOR},
				{CONST_SRC_CODE_RIM_LIGHT_TECHNIQUE, h1::CONST_SRC_CODE_RIM_LIGHT_TECHNIQUE},
				{CONST_SRC_CODE_DEBUG_BUMPMAP, h1::CONST_SRC_CODE_DEBUG_BUMPMAP},
				//{CONST_SRC_CODE_DEBUG_TEXDENSITY, h1::CONST_SRC_NONE},

				{CONST_SRC_CODE_MATERIAL_COLOR, h1::CONST_SRC_CODE_MATERIAL_COLOR},
				{CONST_SRC_CODE_FOG, h1::CONST_SRC_CODE_FOG},
				{CONST_SRC_CODE_FOG_COLOR_LINEAR, h1::CONST_SRC_CODE_FOG_COLOR_LINEAR},
				{CONST_SRC_CODE_FOG_COLOR_GAMMA, h1::CONST_SRC_CODE_FOG_COLOR_GAMMA},
				{CONST_SRC_CODE_FOG_SUN_CONSTS, h1::CONST_SRC_CODE_FOG_SUN_CONSTS},
				{CONST_SRC_CODE_FOG_SUN_COLOR_LINEAR, h1::CONST_SRC_CODE_FOG_SUN_COLOR_LINEAR},
				{CONST_SRC_CODE_FOG_SUN_COLOR_GAMMA, h1::CONST_SRC_CODE_FOG_SUN_COLOR_GAMMA},
				{CONST_SRC_CODE_FOG_SUN_DIR, h1::CONST_SRC_CODE_FOG_SUN_DIR},
				{CONST_SRC_CODE_FOG_SKY_FOG, h1::CONST_SRC_CODE_FOG_SKY_FOG},
				{CONST_SRC_CODE_FOG_HEIGHT_FOG, h1::CONST_SRC_CODE_FOG_HEIGHT_FOG},
				{CONST_SRC_CODE_ATMOS_FOG_PARMS_0, h1::CONST_SRC_CODE_ATMOS_FOG_PARMS_0},
				{CONST_SRC_CODE_ATMOS_FOG_PARMS_1, h1::CONST_SRC_CODE_ATMOS_FOG_PARMS_1},
				{CONST_SRC_CODE_ATMOS_FOG_PARMS_2, h1::CONST_SRC_CODE_ATMOS_FOG_PARMS_2},
				{CONST_SRC_CODE_ATMOS_FOG_PARMS_3, h1::CONST_SRC_CODE_ATMOS_FOG_PARMS_3},
				{CONST_SRC_CODE_ATMOS_FOG_PARMS_4, h1::CONST_SRC_CODE_ATMOS_FOG_PARMS_4},
				{CONST_SRC_CODE_ATMOS_FOG_PARMS_5, h1::CONST_SRC_CODE_ATMOS_FOG_PARMS_5},
				{CONST_SRC_CODE_ATMOS_FOG_PARMS_6, h1::CONST_SRC_CODE_ATMOS_FOG_PARMS_6},
				//{CONST_SRC_CODE_ATMOS_FOG_PARMS_7, h1::CONST_SRC_NONE},
				{CONST_SRC_CODE_ATMOS_FOG_PARMS_7, h1::CONST_SRC_CODE_ATMOS_FOG_PARMS_6},

				{CONST_SRC_CODE_FOG_SKY_DIR, h1::CONST_SRC_CODE_FOG_SKY_DIR},
				{CONST_SRC_CODE_FOG_DEPTHHACK, h1::CONST_SRC_CODE_FOG_DEPTHHACK},
				{CONST_SRC_CODE_GLOW_SETUP, h1::CONST_SRC_CODE_GLOW_SETUP},
				{CONST_SRC_CODE_GLOW_APPLY, h1::CONST_SRC_CODE_GLOW_APPLY},
				{CONST_SRC_CODE_GLOW_SETUP_ALT_COLOR_SCALE, h1::CONST_SRC_CODE_GLOW_SETUP_ALT_COLOR_SCALE},
				{CONST_SRC_CODE_COLOR_BIAS, h1::CONST_SRC_CODE_COLOR_BIAS},
				{CONST_SRC_CODE_COLOR_TINT_BASE, h1::CONST_SRC_CODE_COLOR_TINT_BASE},
				{CONST_SRC_CODE_COLOR_TINT_DELTA, h1::CONST_SRC_CODE_COLOR_TINT_DELTA},
				{CONST_SRC_CODE_COLOR_TINT_QUADRATIC_DELTA, h1::CONST_SRC_CODE_COLOR_TINT_QUADRATIC_DELTA},
				//{CONST_SRC_CODE_COLOR_TINT_HDR_CROSSOVER, h1::CONST_SRC_NONE},
				//{CONST_SRC_CODE_COLOR_TINT_HDR_DARK, h1::CONST_SRC_NONE},
				//{CONST_SRC_CODE_COLOR_TINT_HDR_DARK_TANGENT, h1::CONST_SRC_NONE},
				//{CONST_SRC_CODE_COLOR_TINT_HDR_MEDIUM, h1::CONST_SRC_NONE},
				//{CONST_SRC_CODE_COLOR_TINT_HDR_MEDIUM_TANGENT, h1::CONST_SRC_NONE},
				//{CONST_SRC_CODE_COLOR_TINT_HDR_LIGHT, h1::CONST_SRC_NONE},
				//{CONST_SRC_CODE_COLOR_TINT_HDR_LIGHT_TANGENT, h1::CONST_SRC_NONE},
				//{CONST_SRC_CODE_COLOR_TINT_HDR_SPECULAR, h1::CONST_SRC_NONE},
				//{CONST_SRC_CODE_COLOR_TINT_HDR_SPECULAR_TANGENT, h1::CONST_SRC_NONE},
				{CONST_SRC_CODE_PERCEPTUAL_PARMS, h1::CONST_SRC_CODE_PERCEPTUAL_PARMS},
				{CONST_SRC_CODE_FILMIC_PARMS, h1::CONST_SRC_CODE_FILMIC_PARMS},
				{CONST_SRC_CODE_FILMIC_SHOULDER_PARMS, h1::CONST_SRC_CODE_FILMIC_SHOULDER_PARMS},
				{CONST_SRC_CODE_FILMIC_TOE_PARMS, h1::CONST_SRC_CODE_FILMIC_TOE_PARMS},
				{CONST_SRC_CODE_TONEMAP_PARMS, h1::CONST_SRC_CODE_TONEMAP_PARMS},
				{CONST_SRC_CODE_HDR_STAGE_PARMS, h1::CONST_SRC_CODE_HDR_STAGE_PARMS},
				{CONST_SRC_CODE_UI3D_UV_SETUP_0, h1::CONST_SRC_CODE_UI3D_UV_SETUP_0},
				{CONST_SRC_CODE_UI3D_UV_SETUP_1, h1::CONST_SRC_CODE_UI3D_UV_SETUP_1},
				{CONST_SRC_CODE_UI3D_UV_SETUP_2, h1::CONST_SRC_CODE_UI3D_UV_SETUP_2},
				{CONST_SRC_CODE_UI3D_UV_SETUP_3, h1::CONST_SRC_CODE_UI3D_UV_SETUP_3},
				{CONST_SRC_CODE_UI3D_UV_SETUP_4, h1::CONST_SRC_CODE_UI3D_UV_SETUP_4},
				{CONST_SRC_CODE_UI3D_UV_SETUP_5, h1::CONST_SRC_CODE_UI3D_UV_SETUP_5},
				{CONST_SRC_CODE_HUDFX_PARMS, h1::CONST_SRC_CODE_HUDFX_PARMS},
				{CONST_SRC_CODE_HUDFX_PARMS2, h1::CONST_SRC_CODE_HUDFX_PARMS2},
				{CONST_SRC_CODE_SSSS_PARAMS, h1::CONST_SRC_CODE_SSSS_PARAMS},
				{CONST_SRC_CODE_SSSS_SCALE, h1::CONST_SRC_CODE_SSSS_SCALE},
				{CONST_SRC_CODE_SSSS_KERNEL_0, h1::CONST_SRC_CODE_SSSS_KERNEL_0},
				{CONST_SRC_CODE_SSSS_KERNEL_1, h1::CONST_SRC_CODE_SSSS_KERNEL_1},
				{CONST_SRC_CODE_SSSS_KERNEL_2, h1::CONST_SRC_CODE_SSSS_KERNEL_2},
				{CONST_SRC_CODE_SSSS_KERNEL_3, h1::CONST_SRC_CODE_SSSS_KERNEL_3},
				{CONST_SRC_CODE_SSSS_KERNEL_4, h1::CONST_SRC_CODE_SSSS_KERNEL_4},
				{CONST_SRC_CODE_SSSS_KERNEL_5, h1::CONST_SRC_CODE_SSSS_KERNEL_5},
				{CONST_SRC_CODE_SSSS_KERNEL_6, h1::CONST_SRC_CODE_SSSS_KERNEL_6},
				{CONST_SRC_CODE_SSSS_KERNEL_7, h1::CONST_SRC_CODE_SSSS_KERNEL_7},
				{CONST_SRC_CODE_SSSS_KERNEL_8, h1::CONST_SRC_CODE_SSSS_KERNEL_8},
				{CONST_SRC_CODE_SSSS_KERNEL_9, h1::CONST_SRC_CODE_SSSS_KERNEL_9},
				{CONST_SRC_CODE_SSSS_KERNEL_10, h1::CONST_SRC_CODE_SSSS_KERNEL_10},
				{CONST_SRC_CODE_SSSS_KERNEL_11, h1::CONST_SRC_CODE_SSSS_KERNEL_11},
				{CONST_SRC_CODE_SSSS_KERNEL_12, h1::CONST_SRC_CODE_SSSS_KERNEL_12},
				{CONST_SRC_CODE_OUTDOOR_FEATHER_PARMS, h1::CONST_SRC_CODE_OUTDOOR_FEATHER_PARMS},
				{CONST_SRC_CODE_ENVMAP_PARMS, h1::CONST_SRC_CODE_ENVMAP_PARMS},
				{CONST_SRC_CODE_SUN_SHADOWMAP_PIXEL_ADJUST_ARRAY_0, h1::CONST_SRC_CODE_SUN_SHADOWMAP_PIXEL_ADJUST_ARRAY_0},
				{CONST_SRC_CODE_SUN_SHADOWMAP_PIXEL_ADJUST_ARRAY_1, h1::CONST_SRC_CODE_SUN_SHADOWMAP_PIXEL_ADJUST_ARRAY_1},
				{CONST_SRC_CODE_SUN_SHADOWMAP_PIXEL_ADJUST_ARRAY_2, h1::CONST_SRC_CODE_SUN_SHADOWMAP_PIXEL_ADJUST_ARRAY_2},
				{CONST_SRC_CODE_SUN_SHADOWMAP_CASCADE_V_CLAMP, h1::CONST_SRC_CODE_SUN_SHADOWMAP_CASCADE_V_CLAMP},
				{CONST_SRC_CODE_SUN_SHADOWMAP_NEAR_FAR_PLANE, h1::CONST_SRC_CODE_SUN_SHADOWMAP_NEAR_FAR_PLANE},
				{CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST, h1::CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST},
				{CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_1, h1::CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_1},
				{CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_2, h1::CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_2},
				{CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_3, h1::CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_3},
				{CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_ARRAY_0, h1::CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_ARRAY_0},
				{CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_ARRAY_1, h1::CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_ARRAY_1},
				{CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_ARRAY_2, h1::CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_ARRAY_2},
				{CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_ARRAY_3, h1::CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_ARRAY_3},
				{CONST_SRC_CODE_SPOT_SHADOWMAP_ZTRANSFORM, h1::CONST_SRC_CODE_SPOT_SHADOWMAP_ZTRANSFORM},
				{CONST_SRC_CODE_SPOT_SHADOWMAP_ZTRANSFORM_1, h1::CONST_SRC_CODE_SPOT_SHADOWMAP_ZTRANSFORM_1},
				{CONST_SRC_CODE_SPOT_SHADOWMAP_ZTRANSFORM_2, h1::CONST_SRC_CODE_SPOT_SHADOWMAP_ZTRANSFORM_2},
				{CONST_SRC_CODE_SPOT_SHADOWMAP_ZTRANSFORM_3, h1::CONST_SRC_CODE_SPOT_SHADOWMAP_ZTRANSFORM_3},
				{CONST_SRC_CODE_SPOT_SHADOWMAP_ZTRANSFORM_ARRAY_0, h1::CONST_SRC_CODE_SPOT_SHADOWMAP_ZTRANSFORM_ARRAY_0},
				{CONST_SRC_CODE_SPOT_SHADOWMAP_ZTRANSFORM_ARRAY_1, h1::CONST_SRC_CODE_SPOT_SHADOWMAP_ZTRANSFORM_ARRAY_1},
				{CONST_SRC_CODE_SPOT_SHADOWMAP_ZTRANSFORM_ARRAY_2, h1::CONST_SRC_CODE_SPOT_SHADOWMAP_ZTRANSFORM_ARRAY_2},
				{CONST_SRC_CODE_SPOT_SHADOWMAP_ZTRANSFORM_ARRAY_3, h1::CONST_SRC_CODE_SPOT_SHADOWMAP_ZTRANSFORM_ARRAY_3},
				{CONST_SRC_CODE_COMPOSITE_FX_DISTORTION, h1::CONST_SRC_CODE_COMPOSITE_FX_DISTORTION},
				{CONST_SRC_CODE_POSTFX_FADE_EFFECT, h1::CONST_SRC_CODE_POSTFX_FADE_EFFECT},
				{CONST_SRC_CODE_SCENE_UV_MULT, h1::CONST_SRC_CODE_SCENE_UV_MULT},
				{CONST_SRC_CODE_SCENE_VIEW_MULT, h1::CONST_SRC_CODE_SCENE_VIEW_MULT},
				{CONST_SRC_CODE_TEXCOORD_CLAMP_0, h1::CONST_SRC_CODE_TEXCOORD_CLAMP_0},
				{CONST_SRC_CODE_TEXCOORD_CLAMP_1, h1::CONST_SRC_CODE_TEXCOORD_CLAMP_1},
				{CONST_SRC_CODE_VIEWPORT_DIMENSIONS, h1::CONST_SRC_CODE_VIEWPORT_DIMENSIONS},
				{CONST_SRC_CODE_FRAMEBUFFER_READ, h1::CONST_SRC_CODE_FRAMEBUFFER_READ},
				{CONST_SRC_CODE_THERMAL_COLOR_OFFSET, h1::CONST_SRC_CODE_THERMAL_COLOR_OFFSET},
				{CONST_SRC_CODE_THERMAL_FADE_CONTROL, h1::CONST_SRC_CODE_THERMAL_FADE_CONTROL},
				{CONST_SRC_CODE_THERMAL_FADE_COLOR, h1::CONST_SRC_CODE_THERMAL_FADE_COLOR},
				{CONST_SRC_CODE_PLAYLIST_POPULATION_PARAMS, h1::CONST_SRC_CODE_PLAYLIST_POPULATION_PARAMS},
				{CONST_SRC_CODE_TESSELLATION_PARMS, h1::CONST_SRC_CODE_TESSELLATION_PARMS},
				{CONST_SRC_CODE_TESSELLATION_PARMS2, h1::CONST_SRC_CODE_TESSELLATION_PARMS2},
				{CONST_SRC_CODE_EYE_PARAMETER_DVAR, h1::CONST_SRC_CODE_EYE_PARAMETER_DVAR},
				{CONST_SRC_CODE_MP_RIM_PARAMETER_DVAR1, h1::CONST_SRC_CODE_MP_RIM_PARAMETER_DVAR1},
				{CONST_SRC_CODE_MP_RIM_PARAMETER_DVAR2, h1::CONST_SRC_CODE_MP_RIM_PARAMETER_DVAR2},
				{CONST_SRC_CODE_HEAD_ROT_MAT_R0, h1::CONST_SRC_CODE_HEAD_ROT_MAT_R0},
				{CONST_SRC_CODE_HEAD_ROT_MAT_R1, h1::CONST_SRC_CODE_HEAD_ROT_MAT_R1},
				{CONST_SRC_CODE_HEAD_ROT_MAT_R2, h1::CONST_SRC_CODE_HEAD_ROT_MAT_R2},
				{CONST_SRC_CODE_GUN_SIGHT_COLOR, h1::CONST_SRC_CODE_GUN_SIGHT_COLOR},
				{CONST_SRC_CODE_GUN_RETICLE_COLOR, h1::CONST_SRC_CODE_GUN_RETICLE_COLOR},
				//{CONST_SRC_CODE_ADS_OVERLAY_RECT, h1::CONST_SRC_NONE},

				{CONST_SRC_CODE_BASE_LIGHTING_COORDS, h1::CONST_SRC_CODE_BASE_LIGHTING_COORDS},
				{CONST_SRC_CODE_LIGHT_PROBE_AMBIENT, h1::CONST_SRC_CODE_LIGHT_PROBE_AMBIENT},
				{CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE, h1::CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE},
				{CONST_SRC_CODE_CLIP_SPACE_LOOKUP_OFFSET, h1::CONST_SRC_CODE_CLIP_SPACE_LOOKUP_OFFSET},
				{CONST_SRC_CODE_PARTICLE_CLOUD_TEXTURE_ATLAS_SETTINGS, h1::CONST_SRC_CODE_PARTICLE_CLOUD_TEXTURE_ATLAS_SETTINGS},
				{CONST_SRC_CODE_PARTICLE_CLOUD_VEL_WORLD, h1::CONST_SRC_CODE_PARTICLE_CLOUD_VEL_WORLD},
				{CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX0, h1::CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX0},
				{CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX1, h1::CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX1},
				{CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX2, h1::CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX2},
				{CONST_SRC_CODE_PARTICLE_CLOUD_SPARK_COLOR0, h1::CONST_SRC_CODE_PARTICLE_CLOUD_SPARK_COLOR0},
				{CONST_SRC_CODE_PARTICLE_CLOUD_SPARK_COLOR1, h1::CONST_SRC_CODE_PARTICLE_CLOUD_SPARK_COLOR1},
				{CONST_SRC_CODE_PARTICLE_CLOUD_SPARK_COLOR2, h1::CONST_SRC_CODE_PARTICLE_CLOUD_SPARK_COLOR2},
				{CONST_SRC_CODE_PARTICLE_FOUNTAIN_PARM0, h1::CONST_SRC_CODE_PARTICLE_FOUNTAIN_PARM0},
				{CONST_SRC_CODE_PARTICLE_FOUNTAIN_PARM1, h1::CONST_SRC_CODE_PARTICLE_FOUNTAIN_PARM1},
				{CONST_SRC_CODE_LIT2D_BLOODSPATTER_FADESHARPNESS, h1::CONST_SRC_CODE_LIT2D_BLOODSPATTER_FADESHARPNESS},
				{CONST_SRC_CODE_BLUR_SCENE_PIXEL_POS_TO_UV, h1::CONST_SRC_CODE_BLUR_SCENE_PIXEL_POS_TO_UV},
				{CONST_SRC_CODE_REACTIVEMOTION_CENTERS_0, h1::CONST_SRC_CODE_REACTIVEMOTION_CENTERS_0},
				{CONST_SRC_CODE_REACTIVEMOTION_CENTERS_1, h1::CONST_SRC_CODE_REACTIVEMOTION_CENTERS_1},
				{CONST_SRC_CODE_REACTIVEMOTION_CENTERS_2, h1::CONST_SRC_CODE_REACTIVEMOTION_CENTERS_2},
				{CONST_SRC_CODE_REACTIVEMOTION_CENTERS_3, h1::CONST_SRC_CODE_REACTIVEMOTION_CENTERS_3},
				{CONST_SRC_CODE_REACTIVEMOTION_CENTERS_4, h1::CONST_SRC_CODE_REACTIVEMOTION_CENTERS_4},
				{CONST_SRC_CODE_REACTIVEMOTION_CENTERS_5, h1::CONST_SRC_CODE_REACTIVEMOTION_CENTERS_5},
				{CONST_SRC_CODE_REACTIVEMOTION_CENTERS_6, h1::CONST_SRC_CODE_REACTIVEMOTION_CENTERS_6},
				{CONST_SRC_CODE_REACTIVEMOTION_CENTERS_7, h1::CONST_SRC_CODE_REACTIVEMOTION_CENTERS_7},
				{CONST_SRC_CODE_REACTIVEMOTION_CENTERS_8, h1::CONST_SRC_CODE_REACTIVEMOTION_CENTERS_8},
				{CONST_SRC_CODE_REACTIVEMOTION_CENTERS_9, h1::CONST_SRC_CODE_REACTIVEMOTION_CENTERS_9},
				{CONST_SRC_CODE_REACTIVEMOTION_CENTERS_10, h1::CONST_SRC_CODE_REACTIVEMOTION_CENTERS_10},
				{CONST_SRC_CODE_REACTIVEMOTION_CENTERS_11, h1::CONST_SRC_CODE_REACTIVEMOTION_CENTERS_11},
				{CONST_SRC_CODE_REACTIVEMOTION_CENTERS_12, h1::CONST_SRC_CODE_REACTIVEMOTION_CENTERS_12},
				{CONST_SRC_CODE_REACTIVEMOTION_CENTERS_13, h1::CONST_SRC_CODE_REACTIVEMOTION_CENTERS_13},
				{CONST_SRC_CODE_REACTIVEMOTION_CENTERS_14, h1::CONST_SRC_CODE_REACTIVEMOTION_CENTERS_14},
				{CONST_SRC_CODE_REACTIVEMOTION_CENTERS_15, h1::CONST_SRC_CODE_REACTIVEMOTION_CENTERS_15},
				{CONST_SRC_CODE_DEPTH_FROM_CLIP, h1::CONST_SRC_CODE_DEPTH_FROM_CLIP},
				{CONST_SRC_CODE_CODE_MESH_ARG_0, h1::CONST_SRC_CODE_CODE_MESH_ARG_0},
				{CONST_SRC_CODE_CODE_MESH_ARG_1, h1::CONST_SRC_CODE_CODE_MESH_ARG_1},
				{CONST_SRC_CODE_CODE_MESH_ARG_3, h1::CONST_SRC_CODE_CODE_MESH_ARG_3},
				{CONST_SRC_CODE_CODE_MESH_ARG_4, h1::CONST_SRC_CODE_CODE_MESH_ARG_4},
				{CONST_SRC_CODE_SCRIPT_CONST0, h1::CONST_SRC_CODE_SCRIPT_CONST0},
				{CONST_SRC_CODE_VIEW_MATRIX, h1::CONST_SRC_CODE_VIEW_MATRIX},
				{CONST_SRC_CODE_INVERSE_VIEW_MATRIX, h1::CONST_SRC_CODE_INVERSE_VIEW_MATRIX},
				{CONST_SRC_CODE_TRANSPOSE_VIEW_MATRIX, h1::CONST_SRC_CODE_TRANSPOSE_VIEW_MATRIX},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_MATRIX, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_MATRIX},
				{CONST_SRC_CODE_PROJECTION_MATRIX, h1::CONST_SRC_CODE_PROJECTION_MATRIX},
				{CONST_SRC_CODE_INVERSE_PROJECTION_MATRIX, h1::CONST_SRC_CODE_INVERSE_PROJECTION_MATRIX},
				{CONST_SRC_CODE_TRANSPOSE_PROJECTION_MATRIX, h1::CONST_SRC_CODE_TRANSPOSE_PROJECTION_MATRIX},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_PROJECTION_MATRIX, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_PROJECTION_MATRIX},
				{CONST_SRC_CODE_VIEW_PROJECTION_MATRIX, h1::CONST_SRC_CODE_VIEW_PROJECTION_MATRIX},
				{CONST_SRC_CODE_INVERSE_VIEW_PROJECTION_MATRIX, h1::CONST_SRC_CODE_INVERSE_VIEW_PROJECTION_MATRIX},
				{CONST_SRC_CODE_TRANSPOSE_VIEW_PROJECTION_MATRIX, h1::CONST_SRC_CODE_TRANSPOSE_VIEW_PROJECTION_MATRIX},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_PROJECTION_MATRIX, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_PROJECTION_MATRIX},
				{CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX, h1::CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX},
				{CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX, h1::CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX},
				{CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX, h1::CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX},
				{CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX1, h1::CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX1},
				{CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX1, h1::CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX1},
				{CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX1, h1::CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX1},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX1, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX1},
				{CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX2, h1::CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX2},
				{CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX2, h1::CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX2},
				{CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX2, h1::CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX2},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX2, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX2},
				{CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX3, h1::CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX3},
				{CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX3, h1::CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX3},
				{CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX3, h1::CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX3},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX3, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX3},
				{CONST_SRC_CODE_WORLD_OUTDOOR_LOOKUP_MATRIX, h1::CONST_SRC_CODE_WORLD_OUTDOOR_LOOKUP_MATRIX},
				{CONST_SRC_CODE_INVERSE_WORLD_OUTDOOR_LOOKUP_MATRIX, h1::CONST_SRC_CODE_INVERSE_WORLD_OUTDOOR_LOOKUP_MATRIX},
				{CONST_SRC_CODE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX, h1::CONST_SRC_CODE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX},
				{CONST_SRC_CODE_PREV_FRAME_WORLD_MATRIX, h1::CONST_SRC_CODE_PREV_FRAME_WORLD_MATRIX},
				{CONST_SRC_CODE_PREV_FRAME_INVERSE_WORLD_MATRIX, h1::CONST_SRC_CODE_PREV_FRAME_INVERSE_WORLD_MATRIX},
				{CONST_SRC_CODE_PREV_FRAME_TRANSPOSE_WORLD_MATRIX, h1::CONST_SRC_CODE_PREV_FRAME_TRANSPOSE_WORLD_MATRIX},
				{CONST_SRC_CODE_PREV_FRAME_INVERSE_TRANSPOSE_WORLD_MATRIX, h1::CONST_SRC_CODE_PREV_FRAME_INVERSE_TRANSPOSE_WORLD_MATRIX},
				{CONST_SRC_CODE_WORLD_MATRIX0, h1::CONST_SRC_CODE_WORLD_MATRIX0},
				{CONST_SRC_CODE_INVERSE_WORLD_MATRIX0, h1::CONST_SRC_CODE_INVERSE_WORLD_MATRIX0},
				{CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX0, h1::CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX0},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX0, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX0},
				{CONST_SRC_CODE_WORLD_VIEW_MATRIX0, h1::CONST_SRC_CODE_WORLD_VIEW_MATRIX0},
				{CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX0, h1::CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX0},
				{CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX0, h1::CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX0},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX0, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX0},
				{CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX0, h1::CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX0},
				{CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX0, h1::CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX0},
				{CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX0, h1::CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX0},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX0, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX0},
				{CONST_SRC_CODE_WORLD_MATRIX1, h1::CONST_SRC_CODE_WORLD_MATRIX1},
				{CONST_SRC_CODE_INVERSE_WORLD_MATRIX1, h1::CONST_SRC_CODE_INVERSE_WORLD_MATRIX1},
				{CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX1, h1::CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX1},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX1, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX1},
				{CONST_SRC_CODE_WORLD_VIEW_MATRIX1, h1::CONST_SRC_CODE_WORLD_VIEW_MATRIX1},
				{CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX1, h1::CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX1},
				{CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX1, h1::CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX1},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX1, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX1},
				{CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX1, h1::CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX1},
				{CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX1, h1::CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX1},
				{CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX1, h1::CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX1},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX1, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX1},
				{CONST_SRC_CODE_WORLD_MATRIX2, h1::CONST_SRC_CODE_WORLD_MATRIX2},
				{CONST_SRC_CODE_INVERSE_WORLD_MATRIX2, h1::CONST_SRC_CODE_INVERSE_WORLD_MATRIX2},
				{CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX2, h1::CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX2},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX2, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX2},
				{CONST_SRC_CODE_WORLD_VIEW_MATRIX2, h1::CONST_SRC_CODE_WORLD_VIEW_MATRIX2},
				{CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX2, h1::CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX2},
				{CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX2, h1::CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX2},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX2, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX2},
				{CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX2, h1::CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX2},
				{CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX2, h1::CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX2},
				{CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX2, h1::CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX2},
				{CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX2, h1::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX2},
		};

		unsigned short convert_code_const(unsigned short index, MaterialTechniqueSet* techset, 
			MaterialTechnique* tech, int techtype)
		{
			if (h1_const_map.contains(index))
			{
				return h1_const_map.at(index);
			}
			else
			{
				ZONETOOL_ERROR("Unable to map code constant %d! (%s, %s, %i)", index, techset->name, tech->hdr.name, techtype);
				return h1::CONST_SRC_NONE;
			}
		}

		unsigned short convert_dest(unsigned short dest)
		{
			if (dest >= 65)
			{
				return dest - 3;
			}

			if (dest >= 15)
			{
				return dest - 1;
			}

			return dest;
		}

		MaterialShaderArgument* convert_shader_arguments(MaterialPass* pass, MaterialShaderArgument* args, 
			utils::memory::allocator& allocator, MaterialTechniqueSet* techset, MaterialTechnique* tech, int index)
		{
			const auto arg_count = pass->perPrimArgCount + pass->perObjArgCount + pass->stableArgCount;
			const auto converted_args = allocator.allocate_array<MaterialShaderArgument>(arg_count);
			std::memcpy(converted_args, args, sizeof(MaterialShaderArgument) * arg_count);

			for (auto i = 0; i < arg_count; i++)
			{
				if (converted_args[i].type != 0)
				{
					continue;
				}

				//if (i >= pass->perPrimArgCount + pass->perObjArgCount)
				{
					converted_args[i].dest = convert_dest(converted_args[i].dest);
				}

				converted_args[i].u.codeConst.index = convert_code_const(converted_args[i].u.codeConst.index,
					techset, tech, index);
			}

			return converted_args;
		}
	}

	unsigned char* convert_shader(unsigned char* program, unsigned int program_size,
		utils::memory::allocator& allocator)
	{
		if (program == nullptr)
		{
			return program;
		}

		const auto new_program = allocator.allocate_array<unsigned char>(program_size);
		std::memcpy(new_program, program, program_size);

		const auto offsets = shader::get_dest_reference_offsets(program, program_size);
		for (const auto& offset : offsets)
		{
			const auto dest = reinterpret_cast<unsigned int*>(new_program + offset);
			*dest = static_cast<unsigned int>(convert_dest(static_cast<unsigned short>(*dest)));
		}

		const auto checksum = shader::generate_checksum(new_program, program_size);
		const auto header = reinterpret_cast<shader::dx11_shader_header*>(new_program);
		std::memcpy(header->checksum, &checksum, sizeof(shader::shader_checksum));

		return new_program;
	}

	std::unordered_map<std::string, std::uintptr_t> ITechset::vertexdecl_pointers;

	std::uintptr_t ITechset::get_vertexdecl_pointer(std::string vertexdecl)
	{
		if (vertexdecl_pointers.find(vertexdecl) != vertexdecl_pointers.end())
		{
			return vertexdecl_pointers[vertexdecl];
		}
		return 0;
	}

	void ITechset::add_vertexdecl_pointer(std::string name, std::uintptr_t pointer)
	{
		auto ptr = get_vertexdecl_pointer(name);
		if (!ptr)
		{
			vertexdecl_pointers[name] = pointer;
		}
	}

	MaterialTechnique* parse_technique(const std::string& name, ZoneMemory* mem, std::uint32_t index)
	{
		return nullptr;
	}

	MaterialTechniqueSet* ITechset::parse(const std::string& name, ZoneMemory* mem)
	{
		return nullptr;
	}

	void ITechset::parse_constant_buffer_indexes(const std::string& techset, unsigned char* indexes, ZoneMemory* mem)
	{

	}

	void ITechset::parse_constant_buffer_def_array(const std::string& techset, MaterialConstantBufferDef** def_ptr, unsigned char* count, ZoneMemory* mem)
	{

	}

	void ITechset::parse_stateinfo(const std::string& techset, Material* mat, ZoneMemory* mem)
	{

	}

	void ITechset::parse_statebits(const std::string& techset, unsigned char* statebits, ZoneMemory* mem)
	{

	}

	void ITechset::parse_statebitsmap(const std::string& techset, GfxStateBits** map, unsigned char* count,
		std::vector<std::array<std::uint64_t, 10>>* dssb,
		std::vector<std::array<std::uint32_t, 3>>* bsb,
		ZoneMemory* mem)
	{

	}

	void ITechset::init(const std::string& name, ZoneMemory* mem)
	{

	}

	void ITechset::prepare(ZoneBuffer* buf, ZoneMemory* mem)
	{

	}

	void ITechset::load_depending(IZone* zone)
	{

	}

	std::string ITechset::name()
	{
		return this->name_;
	}

	std::int32_t ITechset::type()
	{
		return ASSET_TYPE_TECHNIQUE_SET;
	}

	void ITechset::write(IZone* zone, ZoneBuffer* buf)
	{

	}

	void ITechset::dump_constant_buffer_indexes(const std::string& techset, unsigned char* h2_cbi)
	{
		utils::memory::allocator allocator;
		const auto path = "techsets\\constantbuffer\\"s + techset + ".cbi";
		auto file = filesystem::file(path);
		file.open("wb");
		auto fp = file.get_fp();
		const auto cbi = convert_to_h1(h2_cbi, allocator);

		if (fp)
		{
			fwrite(cbi, TECHNIQUES_COUNT, 1, fp);
			file.close();
		}
	}

	void ITechset::dump_constant_buffer_def_array(const std::string& techset, unsigned char count, MaterialConstantBufferDef* def)
	{
		const auto path = "techsets\\constantbuffer\\"s + techset + ".cbt";
		assetmanager::dumper dump;
		if (!dump.open(path))
		{
			return;
		}

		dump.dump_int(count);
		dump.dump_array(def, count);
		for (int i = 0; i < count; i++)
		{
			if (def[i].vsData)
			{
				dump.dump_array(def[i].vsData, def[i].vsDataSize);
			}
			if (def[i].hsData)
			{
				dump.dump_array(def[i].hsData, def[i].hsDataSize);
			}
			if (def[i].dsData)
			{
				dump.dump_array(def[i].dsData, def[i].dsDataSize);
			}
			if (def[i].psData)
			{
				dump.dump_array(def[i].psData, def[i].psDataSize);
			}
			if (def[i].vsOffsetData)
			{
				dump.dump_array(def[i].vsOffsetData, def[i].vsOffsetDataSize);
			}
			if (def[i].hsOffsetData)
			{
				dump.dump_array(def[i].hsOffsetData, def[i].hsOffsetDataSize);
			}
			if (def[i].dsOffsetData)
			{
				dump.dump_array(def[i].dsOffsetData, def[i].dsOffsetDataSize);
			}
			if (def[i].psOffsetData)
			{
				dump.dump_array(def[i].psOffsetData, def[i].psOffsetDataSize);
			}
		}

		dump.close();
	}

	void ITechset::dump_stateinfo(const std::string& techset, Material* mat)
	{
		const auto path = "techsets\\state\\"s + techset + ".stateinfo";

		ordered_json json_data = {};

		json_data["stateFlags"] = mat->stateFlags;

		auto file = filesystem::file(path);
		file.open("wb");
		auto fp = file.get_fp();
		if (fp)
		{
			const auto json_dump = json_data.dump(4);
			file.write(json_dump.data(), json_dump.size(), 1);
			file.close();
		}
	}

	void ITechset::dump_statebits(const std::string& techset, unsigned char* h2_statebits)
	{
		utils::memory::allocator allocator;
		const auto path = "techsets\\state\\"s + techset + ".statebits";
		auto file = filesystem::file(path);
		file.open("wb");
		auto fp = file.get_fp();
		const auto statebits = convert_to_h1(h2_statebits, allocator);

		if (fp)
		{
			fwrite(statebits, TECHNIQUES_COUNT, 1, fp);
			file.close();
		}
	}

	void ITechset::dump_statebits_map(const std::string& techset, GfxStateBits* map, unsigned char count)
	{
		const auto path = "techsets\\state\\"s + techset + ".statebitsmap";

		ordered_json json_data = {};
		for (unsigned char i = 0; i < count; i++)
		{
			XGfxGlobals* varXGfxGlobals = GetXGfxGlobalsForZone(map[i].zone);
			ordered_json entry;
			entry["loadBits"][0] = map[i].loadBits[0];
			entry["loadBits"][1] = map[i].loadBits[1];
			entry["loadBits"][2] = map[i].loadBits[2];
			entry["loadBits"][3] = map[i].loadBits[3];
			entry["loadBits"][4] = map[i].loadBits[4];
			entry["loadBits"][5] = map[i].loadBits[5];
			for (int j = 0; j < 11; j++)
			{
				entry["depthStencilStateBits"][j] = varXGfxGlobals ? varXGfxGlobals->depthStencilStateBits[map[i].depthStencilState[j]] : 0;
			}
			for (int j = 0; j < 3; j++)
			{
				entry["blendStateBits"][j] = varXGfxGlobals ? varXGfxGlobals->blendStateBits[map[i].blendState][j] : 0;
			}
			entry["rasterizerState"] = map[i].rasterizerState;
			json_data[i] = entry;
		}

		auto file = filesystem::file(path);
		file.open("wb");
		auto fp = file.get_fp();
		if (fp)
		{
			const auto json_dump = json_data.dump(4);
			file.write(json_dump.data(), json_dump.size(), 1);
			file.close();
		}
	}

	void ITechset::dump_technique(MaterialTechnique* asset, MaterialTechniqueSet* techset, int index)
	{
		const auto path = "techsets\\"s + asset->hdr.name + ".technique";

		assetmanager::dumper dumper;
		if (!dumper.open(path))
		{
			return;
		}

		utils::memory::allocator allocator;

		dumper.dump_single(&asset->hdr);
		const auto pass_array = allocator.allocate_array<MaterialPass>(asset->hdr.passCount);
		std::memcpy(pass_array, asset->passArray, sizeof(MaterialPass) * asset->hdr.passCount);
		for (auto i = 0; i < asset->hdr.passCount; i++)
		{
			pass_array[i].stableArgSize -= 16;
		}
		dumper.dump_array(pass_array, asset->hdr.passCount);

		dumper.dump_string(asset->hdr.name);
		for (unsigned short i = 0; i < asset->hdr.passCount; i++)
		{
			if (asset->passArray[i].vertexShader)
			{
				const auto vertex_shader = allocator.allocate<MaterialVertexShader>();
				std::memcpy(vertex_shader, asset->passArray[i].vertexShader, sizeof(MaterialVertexShader));
				vertex_shader->name = allocator.duplicate_string(add_postfix(vertex_shader->name));
				dumper.dump_asset(vertex_shader);
				//IVertexShader::dump(asset->passArray[i].vertexShader);
			}

			if (asset->passArray[i].vertexDecl)
			{
				const auto vertex_decl = allocator.allocate<MaterialVertexDeclaration>();
				std::memcpy(vertex_decl, asset->passArray[i].vertexDecl, sizeof(MaterialVertexDeclaration));
				vertex_decl->name = allocator.duplicate_string(add_postfix(vertex_decl->name));
				dumper.dump_asset(vertex_decl);
				IVertexDecl::dump(reinterpret_cast<MaterialVertexDeclaration*>(asset->passArray[i].vertexDecl));
			}

			if (asset->passArray[i].hullShader)
			{
				const auto hull_shader = allocator.allocate<MaterialHullShader>();
				std::memcpy(hull_shader, asset->passArray[i].hullShader, sizeof(MaterialHullShader));
				hull_shader->name = allocator.duplicate_string(add_postfix(hull_shader->name));
				dumper.dump_asset(hull_shader);
				//IHullShader::dump(asset->passArray[i].hullShader);
			}

			if (asset->passArray[i].domainShader)
			{
				const auto domain_shader = allocator.allocate<MaterialDomainShader>();
				std::memcpy(domain_shader, asset->passArray[i].domainShader, sizeof(MaterialDomainShader));
				domain_shader->name = allocator.duplicate_string(add_postfix(domain_shader->name));
				dumper.dump_asset(domain_shader);
				//IDomainShader::dump(asset->passArray[i].domainShader);
			}

			if (asset->passArray[i].pixelShader)
			{
				const auto pixel_shader = allocator.allocate<MaterialPixelShader>();
				std::memcpy(pixel_shader, asset->passArray[i].pixelShader, sizeof(MaterialPixelShader));
				pixel_shader->name = allocator.duplicate_string(add_postfix(pixel_shader->name));
				dumper.dump_asset(pixel_shader);
				//IPixelShader::dump(asset->passArray[i].pixelShader);
			}

			if (asset->passArray[i].args)
			{
				const auto arg_count = asset->passArray[i].perObjArgCount + asset->passArray[i].perPrimArgCount + asset->passArray[i].stableArgCount;
				const auto converted_args = convert_shader_arguments(&asset->passArray[i], asset->passArray[i].args, allocator, techset, asset, index);
				dumper.dump_array(converted_args, arg_count);

				for (auto arg = 0; arg < arg_count; arg++)
				{
					if (asset->passArray[i].args[arg].type == 4)
					{
						dumper.dump_array(const_cast<float*>(asset->passArray[i].args[arg].u.literalConst), 4);
					}
				}
			}
		}

		dumper.close();
	}

	void yeet(h1::MaterialTechniqueSet* asset)
	{
		const auto path = "techsets\\"s + asset->name + ".techset.txt";

		filesystem::file file(path);
		file.open("wb");
		auto fp = file.get_fp();

		for (auto i = 0u; i < TECHNIQUES_COUNT; i++)
		{
			if (asset->techniques[i])
			{
				fprintf(fp, "%i: %s\n", i, asset->techniques[i]->hdr.name);
			}
			else
			{
				fprintf(fp, "%i: nullptr\n", i);
			}
		}

		file.close();
	}

	void ITechset::dump(MaterialTechniqueSet* h2_asset)
	{
		utils::memory::allocator allocator;
		const auto asset = convert_to_h1(h2_asset, allocator);
		const auto path = "techsets\\"s + asset->name + ".techset";

		yeet(asset);

		assetmanager::dumper dumper;
		if (!dumper.open(path))
		{
			return;
		}

		dumper.dump_single(asset);
		dumper.dump_string(asset->name);

		for (auto i = 0u; i < TECHNIQUES_COUNT; i++)
		{
			if (asset->techniques[i])
			{
				dumper.dump_string(asset->techniques[i]->hdr.name);
				ITechset::dump_technique(reinterpret_cast<MaterialTechnique*>(asset->techniques[i]), 
					reinterpret_cast<MaterialTechniqueSet*>(asset), i);
			}
		}

		dumper.close();
	}
}